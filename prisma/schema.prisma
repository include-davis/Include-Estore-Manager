generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Inventory {
  id                 String  @id
  product            Product @relation(fields: [id], references: [id], onDelete: Cascade)
  available_quantity Int
  cost_of_production Float
  lead_time          Int
  reorder_point      Int
  reorder_quantity   Int
  safety_stock       Int
  stock_on_order     Int
}

model Product {
  id                   String         @id @default(uuid())
  inventory            Inventory?
  tags                 ProductToTag[]
  name                 String
  price                Int
  description          String
  details              String
  weight               Int
  height               Int
  width                Int
  depth                Int
  special_label_needed Boolean
}

model ProductToTag {
  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  tag_id     String
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id(name: "id", fields: [product_id, tag_id])
}

model Tag {
  id       String         @id @default(uuid())
  name     String         @unique
  products ProductToTag[]
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String  @unique
  password String

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support

  shipping_address_line_1 String
  shipping_address_line_2 String?
  shipping_city           String
  shipping_state          String?
  shipping_country        String
  shipping_zip            Int
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
